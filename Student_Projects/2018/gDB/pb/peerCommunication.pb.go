// Code generated by protoc-gen-go. DO NOT EDIT.
// source: peerCommunication.proto

package peerCommunication

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SelectQuery struct {
	Query                string   `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	ToSite               string   `protobuf:"bytes,2,opt,name=toSite,proto3" json:"toSite,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SelectQuery) Reset()         { *m = SelectQuery{} }
func (m *SelectQuery) String() string { return proto.CompactTextString(m) }
func (*SelectQuery) ProtoMessage()    {}
func (*SelectQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_95de02238d952371, []int{0}
}

func (m *SelectQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SelectQuery.Unmarshal(m, b)
}
func (m *SelectQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SelectQuery.Marshal(b, m, deterministic)
}
func (m *SelectQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SelectQuery.Merge(m, src)
}
func (m *SelectQuery) XXX_Size() int {
	return xxx_messageInfo_SelectQuery.Size(m)
}
func (m *SelectQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_SelectQuery.DiscardUnknown(m)
}

var xxx_messageInfo_SelectQuery proto.InternalMessageInfo

func (m *SelectQuery) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *SelectQuery) GetToSite() string {
	if m != nil {
		return m.ToSite
	}
	return ""
}

type Query struct {
	Query                string   `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Query) Reset()         { *m = Query{} }
func (m *Query) String() string { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()    {}
func (*Query) Descriptor() ([]byte, []int) {
	return fileDescriptor_95de02238d952371, []int{1}
}

func (m *Query) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Query.Unmarshal(m, b)
}
func (m *Query) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Query.Marshal(b, m, deterministic)
}
func (m *Query) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Query.Merge(m, src)
}
func (m *Query) XXX_Size() int {
	return xxx_messageInfo_Query.Size(m)
}
func (m *Query) XXX_DiscardUnknown() {
	xxx_messageInfo_Query.DiscardUnknown(m)
}

var xxx_messageInfo_Query proto.InternalMessageInfo

func (m *Query) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

type Data struct {
	TableName            string   `protobuf:"bytes,1,opt,name=tableName,proto3" json:"tableName,omitempty"`
	Data                 string   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Data) Reset()         { *m = Data{} }
func (m *Data) String() string { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()    {}
func (*Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_95de02238d952371, []int{2}
}

func (m *Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Data.Unmarshal(m, b)
}
func (m *Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Data.Marshal(b, m, deterministic)
}
func (m *Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Data.Merge(m, src)
}
func (m *Data) XXX_Size() int {
	return xxx_messageInfo_Data.Size(m)
}
func (m *Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Data proto.InternalMessageInfo

func (m *Data) GetTableName() string {
	if m != nil {
		return m.TableName
	}
	return ""
}

func (m *Data) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type State struct {
	EffectedLine         int64    `protobuf:"varint,1,opt,name=effectedLine,proto3" json:"effectedLine,omitempty"`
	Error                string   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *State) Reset()         { *m = State{} }
func (m *State) String() string { return proto.CompactTextString(m) }
func (*State) ProtoMessage()    {}
func (*State) Descriptor() ([]byte, []int) {
	return fileDescriptor_95de02238d952371, []int{3}
}

func (m *State) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_State.Unmarshal(m, b)
}
func (m *State) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_State.Marshal(b, m, deterministic)
}
func (m *State) XXX_Merge(src proto.Message) {
	xxx_messageInfo_State.Merge(m, src)
}
func (m *State) XXX_Size() int {
	return xxx_messageInfo_State.Size(m)
}
func (m *State) XXX_DiscardUnknown() {
	xxx_messageInfo_State.DiscardUnknown(m)
}

var xxx_messageInfo_State proto.InternalMessageInfo

func (m *State) GetEffectedLine() int64 {
	if m != nil {
		return m.EffectedLine
	}
	return 0
}

func (m *State) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type ACK struct {
	Ack                  string   `protobuf:"bytes,1,opt,name=ack,proto3" json:"ack,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ACK) Reset()         { *m = ACK{} }
func (m *ACK) String() string { return proto.CompactTextString(m) }
func (*ACK) ProtoMessage()    {}
func (*ACK) Descriptor() ([]byte, []int) {
	return fileDescriptor_95de02238d952371, []int{4}
}

func (m *ACK) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ACK.Unmarshal(m, b)
}
func (m *ACK) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ACK.Marshal(b, m, deterministic)
}
func (m *ACK) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ACK.Merge(m, src)
}
func (m *ACK) XXX_Size() int {
	return xxx_messageInfo_ACK.Size(m)
}
func (m *ACK) XXX_DiscardUnknown() {
	xxx_messageInfo_ACK.DiscardUnknown(m)
}

var xxx_messageInfo_ACK proto.InternalMessageInfo

func (m *ACK) GetAck() string {
	if m != nil {
		return m.Ack
	}
	return ""
}

type Result struct {
	Result               string   `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_95de02238d952371, []int{5}
}

func (m *Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

type FinishMessage struct {
	ThisTurn             string   `protobuf:"bytes,1,opt,name=thisTurn,proto3" json:"thisTurn,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FinishMessage) Reset()         { *m = FinishMessage{} }
func (m *FinishMessage) String() string { return proto.CompactTextString(m) }
func (*FinishMessage) ProtoMessage()    {}
func (*FinishMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_95de02238d952371, []int{6}
}

func (m *FinishMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FinishMessage.Unmarshal(m, b)
}
func (m *FinishMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FinishMessage.Marshal(b, m, deterministic)
}
func (m *FinishMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FinishMessage.Merge(m, src)
}
func (m *FinishMessage) XXX_Size() int {
	return xxx_messageInfo_FinishMessage.Size(m)
}
func (m *FinishMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_FinishMessage.DiscardUnknown(m)
}

var xxx_messageInfo_FinishMessage proto.InternalMessageInfo

func (m *FinishMessage) GetThisTurn() string {
	if m != nil {
		return m.ThisTurn
	}
	return ""
}

type NextStep struct {
	Plan                 string   `protobuf:"bytes,1,opt,name=plan,proto3" json:"plan,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NextStep) Reset()         { *m = NextStep{} }
func (m *NextStep) String() string { return proto.CompactTextString(m) }
func (*NextStep) ProtoMessage()    {}
func (*NextStep) Descriptor() ([]byte, []int) {
	return fileDescriptor_95de02238d952371, []int{7}
}

func (m *NextStep) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NextStep.Unmarshal(m, b)
}
func (m *NextStep) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NextStep.Marshal(b, m, deterministic)
}
func (m *NextStep) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NextStep.Merge(m, src)
}
func (m *NextStep) XXX_Size() int {
	return xxx_messageInfo_NextStep.Size(m)
}
func (m *NextStep) XXX_DiscardUnknown() {
	xxx_messageInfo_NextStep.DiscardUnknown(m)
}

var xxx_messageInfo_NextStep proto.InternalMessageInfo

func (m *NextStep) GetPlan() string {
	if m != nil {
		return m.Plan
	}
	return ""
}

type NewClient struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Url                  string   `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewClient) Reset()         { *m = NewClient{} }
func (m *NewClient) String() string { return proto.CompactTextString(m) }
func (*NewClient) ProtoMessage()    {}
func (*NewClient) Descriptor() ([]byte, []int) {
	return fileDescriptor_95de02238d952371, []int{8}
}

func (m *NewClient) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewClient.Unmarshal(m, b)
}
func (m *NewClient) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewClient.Marshal(b, m, deterministic)
}
func (m *NewClient) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewClient.Merge(m, src)
}
func (m *NewClient) XXX_Size() int {
	return xxx_messageInfo_NewClient.Size(m)
}
func (m *NewClient) XXX_DiscardUnknown() {
	xxx_messageInfo_NewClient.DiscardUnknown(m)
}

var xxx_messageInfo_NewClient proto.InternalMessageInfo

func (m *NewClient) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NewClient) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func init() {
	proto.RegisterType((*SelectQuery)(nil), "SelectQuery")
	proto.RegisterType((*Query)(nil), "Query")
	proto.RegisterType((*Data)(nil), "Data")
	proto.RegisterType((*State)(nil), "State")
	proto.RegisterType((*ACK)(nil), "ACK")
	proto.RegisterType((*Result)(nil), "Result")
	proto.RegisterType((*FinishMessage)(nil), "FinishMessage")
	proto.RegisterType((*NextStep)(nil), "NextStep")
	proto.RegisterType((*NewClient)(nil), "NewClient")
}

func init() { proto.RegisterFile("peerCommunication.proto", fileDescriptor_95de02238d952371) }

var fileDescriptor_95de02238d952371 = []byte{
	// 391 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0xc1, 0x8e, 0xd3, 0x30,
	0x10, 0x6d, 0x69, 0x92, 0xdd, 0xcc, 0x2e, 0x08, 0x2c, 0x60, 0x57, 0x81, 0x5d, 0xad, 0x7c, 0x42,
	0x20, 0x59, 0x02, 0x2e, 0x48, 0x9c, 0xa2, 0x00, 0x97, 0x5d, 0xaa, 0x92, 0xf0, 0x03, 0x6e, 0x32,
	0xa5, 0x16, 0xa9, 0x93, 0x3a, 0x13, 0x51, 0x7e, 0x94, 0xef, 0x41, 0x76, 0xdc, 0x94, 0x72, 0xd8,
	0xdb, 0x7b, 0x33, 0xe3, 0xb1, 0xdf, 0x7b, 0x86, 0x8b, 0x16, 0xd1, 0x64, 0xcd, 0x66, 0xd3, 0x6b,
	0x55, 0x4a, 0x52, 0x8d, 0x16, 0xad, 0x69, 0xa8, 0xe1, 0x1f, 0xe1, 0xac, 0xc0, 0x1a, 0x4b, 0xfa,
	0xd6, 0xa3, 0xf9, 0xcd, 0x9e, 0x42, 0xb8, 0xb5, 0xe0, 0x72, 0x7a, 0x33, 0x7d, 0x15, 0xe7, 0x03,
	0x61, 0xcf, 0x21, 0xa2, 0xa6, 0x50, 0x84, 0x97, 0x0f, 0x5c, 0xd9, 0x33, 0x7e, 0x05, 0xe1, 0x3d,
	0xc7, 0xf8, 0x07, 0x08, 0x3e, 0x49, 0x92, 0xec, 0x25, 0xc4, 0x24, 0x97, 0x35, 0xce, 0xe5, 0x06,
	0xfd, 0xc4, 0xa1, 0xc0, 0x18, 0x04, 0x95, 0x24, 0xe9, 0x57, 0x3b, 0xcc, 0x53, 0x08, 0x0b, 0x92,
	0x84, 0x8c, 0xc3, 0x39, 0xae, 0x56, 0x58, 0x12, 0x56, 0x77, 0x4a, 0x0f, 0xa7, 0x67, 0xf9, 0x51,
	0xcd, 0x5e, 0x8e, 0xc6, 0x34, 0xc6, 0x6f, 0x18, 0x08, 0xbf, 0x80, 0x59, 0x9a, 0xdd, 0xb2, 0xc7,
	0x30, 0x93, 0xe5, 0x4f, 0x7f, 0xab, 0x85, 0xfc, 0x06, 0xa2, 0x1c, 0xbb, 0xbe, 0x26, 0x2b, 0xcb,
	0x38, 0xe4, 0xdb, 0x9e, 0xf1, 0x37, 0xf0, 0xf0, 0x8b, 0xd2, 0xaa, 0x5b, 0x7f, 0xc5, 0xae, 0x93,
	0x3f, 0x90, 0x25, 0x70, 0x4a, 0x6b, 0xd5, 0x7d, 0xef, 0x8d, 0xf6, 0xa3, 0x23, 0xe7, 0xd7, 0x70,
	0x3a, 0xc7, 0x1d, 0x15, 0x84, 0xad, 0x95, 0xd2, 0xd6, 0x72, 0x3f, 0xe3, 0x30, 0x7f, 0x0b, 0xf1,
	0x1c, 0x7f, 0x65, 0xb5, 0x42, 0x4d, 0x76, 0x40, 0x1f, 0x4c, 0x70, 0xd8, 0xbe, 0xb0, 0x37, 0xb5,
	0x7f, 0xbc, 0x85, 0xef, 0xfe, 0x4c, 0xe1, 0xc9, 0xe2, 0xff, 0xbc, 0xd8, 0x0b, 0x38, 0xf9, 0xbc,
	0xc3, 0xb2, 0x27, 0x64, 0x91, 0x70, 0xb6, 0x27, 0x91, 0x70, 0x2e, 0xf1, 0x09, 0x7b, 0x06, 0xc1,
	0x5d, 0x23, 0x2b, 0x16, 0x0a, 0xeb, 0x78, 0x12, 0x88, 0x34, 0xbb, 0xe5, 0x13, 0x76, 0x0d, 0xd1,
	0x90, 0x2e, 0x3b, 0x17, 0xff, 0xc4, 0x3c, 0xf6, 0xaf, 0x00, 0x0a, 0xd4, 0x95, 0xf7, 0xe3, 0x44,
	0x0c, 0x60, 0x6c, 0xbf, 0x86, 0xb3, 0x1c, 0xb7, 0x3d, 0x76, 0x64, 0x25, 0xb2, 0x47, 0xe2, 0xc8,
	0x96, 0x24, 0x16, 0x7b, 0xe5, 0x7c, 0x62, 0x93, 0x4a, 0xab, 0x2a, 0x5f, 0x64, 0x5e, 0x2a, 0x88,
	0x51, 0xf6, 0x7e, 0xdf, 0x32, 0x72, 0x7f, 0xee, 0xfd, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x38,
	0xfd, 0xfe, 0x16, 0x8e, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PeerCommunicationClient is the client API for PeerCommunication service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PeerCommunicationClient interface {
	Execute(ctx context.Context, in *Query, opts ...grpc.CallOption) (*State, error)
	Load(ctx context.Context, in *Data, opts ...grpc.CallOption) (*ACK, error)
	Select(ctx context.Context, in *SelectQuery, opts ...grpc.CallOption) (*ACK, error)
	SendResult(ctx context.Context, in *Result, opts ...grpc.CallOption) (*ACK, error)
	RequestNext(ctx context.Context, in *FinishMessage, opts ...grpc.CallOption) (*NextStep, error)
	AddRPCClient(ctx context.Context, in *NewClient, opts ...grpc.CallOption) (*ACK, error)
}

type peerCommunicationClient struct {
	cc *grpc.ClientConn
}

func NewPeerCommunicationClient(cc *grpc.ClientConn) PeerCommunicationClient {
	return &peerCommunicationClient{cc}
}

func (c *peerCommunicationClient) Execute(ctx context.Context, in *Query, opts ...grpc.CallOption) (*State, error) {
	out := new(State)
	err := c.cc.Invoke(ctx, "/PeerCommunication/Execute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerCommunicationClient) Load(ctx context.Context, in *Data, opts ...grpc.CallOption) (*ACK, error) {
	out := new(ACK)
	err := c.cc.Invoke(ctx, "/PeerCommunication/Load", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerCommunicationClient) Select(ctx context.Context, in *SelectQuery, opts ...grpc.CallOption) (*ACK, error) {
	out := new(ACK)
	err := c.cc.Invoke(ctx, "/PeerCommunication/Select", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerCommunicationClient) SendResult(ctx context.Context, in *Result, opts ...grpc.CallOption) (*ACK, error) {
	out := new(ACK)
	err := c.cc.Invoke(ctx, "/PeerCommunication/SendResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerCommunicationClient) RequestNext(ctx context.Context, in *FinishMessage, opts ...grpc.CallOption) (*NextStep, error) {
	out := new(NextStep)
	err := c.cc.Invoke(ctx, "/PeerCommunication/RequestNext", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerCommunicationClient) AddRPCClient(ctx context.Context, in *NewClient, opts ...grpc.CallOption) (*ACK, error) {
	out := new(ACK)
	err := c.cc.Invoke(ctx, "/PeerCommunication/AddRPCClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PeerCommunicationServer is the server API for PeerCommunication service.
type PeerCommunicationServer interface {
	Execute(context.Context, *Query) (*State, error)
	Load(context.Context, *Data) (*ACK, error)
	Select(context.Context, *SelectQuery) (*ACK, error)
	SendResult(context.Context, *Result) (*ACK, error)
	RequestNext(context.Context, *FinishMessage) (*NextStep, error)
	AddRPCClient(context.Context, *NewClient) (*ACK, error)
}

func RegisterPeerCommunicationServer(s *grpc.Server, srv PeerCommunicationServer) {
	s.RegisterService(&_PeerCommunication_serviceDesc, srv)
}

func _PeerCommunication_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerCommunicationServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PeerCommunication/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerCommunicationServer).Execute(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerCommunication_Load_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerCommunicationServer).Load(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PeerCommunication/Load",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerCommunicationServer).Load(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerCommunication_Select_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerCommunicationServer).Select(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PeerCommunication/Select",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerCommunicationServer).Select(ctx, req.(*SelectQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerCommunication_SendResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Result)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerCommunicationServer).SendResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PeerCommunication/SendResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerCommunicationServer).SendResult(ctx, req.(*Result))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerCommunication_RequestNext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerCommunicationServer).RequestNext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PeerCommunication/RequestNext",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerCommunicationServer).RequestNext(ctx, req.(*FinishMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerCommunication_AddRPCClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewClient)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerCommunicationServer).AddRPCClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PeerCommunication/AddRPCClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerCommunicationServer).AddRPCClient(ctx, req.(*NewClient))
	}
	return interceptor(ctx, in, info, handler)
}

var _PeerCommunication_serviceDesc = grpc.ServiceDesc{
	ServiceName: "PeerCommunication",
	HandlerType: (*PeerCommunicationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Execute",
			Handler:    _PeerCommunication_Execute_Handler,
		},
		{
			MethodName: "Load",
			Handler:    _PeerCommunication_Load_Handler,
		},
		{
			MethodName: "Select",
			Handler:    _PeerCommunication_Select_Handler,
		},
		{
			MethodName: "SendResult",
			Handler:    _PeerCommunication_SendResult_Handler,
		},
		{
			MethodName: "RequestNext",
			Handler:    _PeerCommunication_RequestNext_Handler,
		},
		{
			MethodName: "AddRPCClient",
			Handler:    _PeerCommunication_AddRPCClient_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "peerCommunication.proto",
}
